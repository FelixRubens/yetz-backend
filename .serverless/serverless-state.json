{
  "service": {
    "service": "websocket",
    "serviceObject": {
      "name": "websocket"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "region": "us-east-1",
      "profile": "yetz",
      "environment": {
        "GLOBAL_STAGE": "dev",
        "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
        "DB_PORT": "3306",
        "DB_USER": "admin",
        "DB_NAME": "yetz",
        "DB_PASSWORD": "yetzPassword"
      },
      "timeout": 10,
      "memorySize": 1024,
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/websocket-dev-connect"
            }
          },
          "DisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/websocket-dev-disconnect"
            }
          },
          "DefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/websocket-dev-default"
            }
          },
          "ConnectionIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/websocket-dev-connectionId"
            }
          },
          "KeepAliveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/websocket-dev-keepAlive"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "websocket",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/websocket-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/websocket-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "websocket",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z/websocket.zip"
              },
              "Handler": "connect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "websocket-dev-connect",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "GLOBAL_STAGE": "dev",
                  "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USER": "admin",
                  "DB_NAME": "yetz",
                  "DB_PASSWORD": "yetzPassword"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectLogGroup"
            ]
          },
          "DisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z/websocket.zip"
              },
              "Handler": "disconnect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "websocket-dev-disconnect",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "GLOBAL_STAGE": "dev",
                  "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USER": "admin",
                  "DB_NAME": "yetz",
                  "DB_PASSWORD": "yetzPassword"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectLogGroup"
            ]
          },
          "DefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z/websocket.zip"
              },
              "Handler": "default.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "websocket-dev-default",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "GLOBAL_STAGE": "dev",
                  "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USER": "admin",
                  "DB_NAME": "yetz",
                  "DB_PASSWORD": "yetzPassword"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DefaultLogGroup"
            ]
          },
          "ConnectionIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z/websocket.zip"
              },
              "Handler": "connectionId.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "websocket-dev-connectionId",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "GLOBAL_STAGE": "dev",
                  "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USER": "admin",
                  "DB_NAME": "yetz",
                  "DB_PASSWORD": "yetzPassword"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectionIdLogGroup"
            ]
          },
          "KeepAliveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z/websocket.zip"
              },
              "Handler": "keepAlive.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "websocket-dev-keepAlive",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "GLOBAL_STAGE": "dev",
                  "DB_HOST": "yetz-db.cvsek4mugosf.sa-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USER": "admin",
                  "DB_NAME": "yetz",
                  "DB_PASSWORD": "yetzPassword"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "KeepAliveLogGroup"
            ]
          },
          "ConnectLambdaVersion7lKz1e8tnQ8AlyOHAuv8RQcgtmH2furDnY8xobIEgQY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectLambdaFunction"
              },
              "CodeSha256": "5tJd8H7h7Ip4xo53Iur9gykl7WdzTO1qpbS/jY5jWFI="
            }
          },
          "DisconnectLambdaVersionEMr501TV5npeGnwd8RQMuUG3ZVR9E8XSSr28KWins": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectLambdaFunction"
              },
              "CodeSha256": "5tJd8H7h7Ip4xo53Iur9gykl7WdzTO1qpbS/jY5jWFI="
            }
          },
          "DefaultLambdaVersionUYT1bbtCq7tv98xIokNEFiqC1ZjukeH8CmPBgqDpM8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultLambdaFunction"
              },
              "CodeSha256": "5tJd8H7h7Ip4xo53Iur9gykl7WdzTO1qpbS/jY5jWFI="
            }
          },
          "ConnectionIdLambdaVersiong05sQH81RROUMxVc0fGlCGa53ixbv47SjC3de1Xo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectionIdLambdaFunction"
              },
              "CodeSha256": "5tJd8H7h7Ip4xo53Iur9gykl7WdzTO1qpbS/jY5jWFI="
            }
          },
          "KeepAliveLambdaVersionHDSLrUlINjYAKvx95Bu70KJePpEUNqwXoVmpUwHdBzA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "KeepAliveLambdaFunction"
              },
              "CodeSha256": "5tJd8H7h7Ip4xo53Iur9gykl7WdzTO1qpbS/jY5jWFI="
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-websocket-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectionIdWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectionIdLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "KeepAliveWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "KeepAliveLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "ConnectionIdLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectionIdLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectionIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "KeepAliveLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "KeepAliveLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "KeepAliveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "connectionIdWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "connectionId",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectionIdWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "keepAliveWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "keepAlive",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "KeepAliveWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeployment4JkEM2ugKpvIoJ8bbrdW2twGj89rRuAYYZYXX6WZZ9U"
              }
            }
          },
          "WebsocketsDeployment4JkEM2ugKpvIoJ8bbrdW2twGj89rRuAYYZYXX6WZZ9U": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute",
              "connectionIdWebsocketsRoute",
              "keepAliveWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "WebsocketDashboardQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "websocket_queue",
              "VisibilityTimeout": 300,
              "SqsManagedSseEnabled": false
            }
          },
          "SQSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              }
            }
          },
          "WsSQSRolePolices": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
              "PolicyName": "WsSQSRole_Police",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sqs:ReceiveMessage",
                      "sqs:DeleteMessage",
                      "sqs:DeleteMessageBatch"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "WebsocketDashboardQueue",
                          "Arn"
                        ]
                      }
                    ]
                  }
                ]
              },
              "Roles": [
                {
                  "Ref": "SQSRole"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-websocket-dev-ServerlessDeploymentBucketName"
            }
          },
          "ConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectLambdaVersion7lKz1e8tnQ8AlyOHAuv8RQcgtmH2furDnY8xobIEgQY"
            },
            "Export": {
              "Name": "sls-websocket-dev-ConnectLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectLambdaVersionEMr501TV5npeGnwd8RQMuUG3ZVR9E8XSSr28KWins"
            },
            "Export": {
              "Name": "sls-websocket-dev-DisconnectLambdaFunctionQualifiedArn"
            }
          },
          "DefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultLambdaVersionUYT1bbtCq7tv98xIokNEFiqC1ZjukeH8CmPBgqDpM8"
            },
            "Export": {
              "Name": "sls-websocket-dev-DefaultLambdaFunctionQualifiedArn"
            }
          },
          "ConnectionIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectionIdLambdaVersiong05sQH81RROUMxVc0fGlCGa53ixbv47SjC3de1Xo"
            },
            "Export": {
              "Name": "sls-websocket-dev-ConnectionIdLambdaFunctionQualifiedArn"
            }
          },
          "KeepAliveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "KeepAliveLambdaVersionHDSLrUlINjYAKvx95Bu70KJePpEUNqwXoVmpUwHdBzA"
            },
            "Export": {
              "Name": "sls-websocket-dev-KeepAliveLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-websocket-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "prune": {
        "automatic": true,
        "number": 3
      }
    },
    "plugins": [
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "connect": {
        "handler": "connect.handler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "websocket-dev-connect",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectLambdaVersion7lKz1e8tnQ8AlyOHAuv8RQcgtmH2furDnY8xobIEgQY"
      },
      "disconnect": {
        "handler": "disconnect.handler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "websocket-dev-disconnect",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DisconnectLambdaVersionEMr501TV5npeGnwd8RQMuUG3ZVR9E8XSSr28KWins"
      },
      "default": {
        "handler": "default.handler",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "websocket-dev-default",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DefaultLambdaVersionUYT1bbtCq7tv98xIokNEFiqC1ZjukeH8CmPBgqDpM8"
      },
      "connectionId": {
        "handler": "connectionId.handler",
        "events": [
          {
            "websocket": {
              "route": "connectionId"
            }
          }
        ],
        "name": "websocket-dev-connectionId",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectionIdLambdaVersiong05sQH81RROUMxVc0fGlCGa53ixbv47SjC3de1Xo"
      },
      "keepAlive": {
        "handler": "keepAlive.handler",
        "events": [
          {
            "websocket": {
              "route": "keepAlive"
            }
          }
        ],
        "name": "websocket-dev-keepAlive",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "KeepAliveLambdaVersionHDSLrUlINjYAKvx95Bu70KJePpEUNqwXoVmpUwHdBzA"
      }
    },
    "resources": {
      "Resources": {
        "WebsocketDashboardQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "websocket_queue",
            "VisibilityTimeout": 300,
            "SqsManagedSseEnabled": false
          }
        },
        "SQSRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            }
          }
        },
        "WsSQSRolePolices": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": "WsSQSRole_Police",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:DeleteMessageBatch"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "WebsocketDashboardQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            },
            "Roles": [
              {
                "Ref": "SQSRole"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "websocket",
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/rubens/Desktop/yetz/serverless/src/services/websocket/.serverless/websocket.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/websocket/dev/1724895537785-2024-08-29T01:38:57.785Z",
    "artifact": "websocket.zip"
  }
}